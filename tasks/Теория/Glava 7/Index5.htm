<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
<head>
<title></title>
<meta http-equiv="Content-Type" content="text/html;charset=windows-1251">
</head>
<body TEXT="#000000" BGCOLOR="#E7E3E7" LINK="#004080" VLINK="#004080" olink="#008080" Background="">
<table BORDER=0   COLS=3 WIDTH="16%" >
  <tr> 
    <td><font face="Arial, Helvetica, sans-serif"><a href="Index4.htm"><img SRC="Back.gif"  BORDER=0 ></a></font></td>
    <td WIDTH="10%"><font face="Arial, Helvetica, sans-serif"><a href="../index.html"><img SRC="Menu.gif" BORDER=0 ></a></font></td>
    <td ALIGN=RIGHT><font face="Arial, Helvetica, sans-serif"><a href="Index6.htm"><img SRC="For.gif" BORDER=0 ></a></font></td>
  </tr>
</table>
<p>&nbsp;</p>
<p align="center"><font face="Arial, Helvetica, sans-serif" size="3"><font size="4">7.2.2. 
  Проблема наложения методов</font><br>
  </font></p>
<p align="left"> <font face="Arial, Helvetica, sans-serif" size="3">Та простая 
  картина, которая вырисовывается из представленного выше механизма прямого наследования, 
  несколько усложняется, если мы попытаемся заменить прямое наследование множественным. 
  В главе 6 уже отмечалось, что это может привести к неоднозначности в наследовании 
  свойств. Но в контексте объектно-ориентированного подхода при множественном 
  наследовании появляется и неоднозначность <i>поведения.</i><br>
  </font></p>
<p align="left"> <font face="Arial, Helvetica, sans-serif" size="3"><i>С </i>этой 
  проблемой впервые столкнулись при разработке объектно-ориентированного языка 
  FLAVORS, который поддерживает множественное наследование и наложение методов 
  <i>[Cannon, 1982]. </i>Язык FLAVORS позволяет объектам иметь несколько родителей 
  и таким образом наследовать процедуры и данные из нескольких источников. Для 
  FLAVORS характерна не иерархия объектов, а гетерархия. Если графически изобразить 
  отношения между разными объектами в FLAVORS, то схема будет больше походить 
  на решетку, чем на дерево. Каков во всем этом смысл? Рассмотрим следующий пример, 
  взятый из статьи Кэннона.<br>
  </font></p>
<p align="left"> <font face="Arial, Helvetica, sans-serif" size="3">Отображение 
  окон на дисплее рабочей станции реализуется, как правило, с использованием объектно-ориентированного 
  стиля программирования. Будем считать, что окна на экране дисплея представлены 
  в виде LISP-объектов, в каждом из которых записаны свойства окна (размеры и 
  положение на поле экрана) и процедуры работы с окном (открытие, закрытие, перерисовка 
  и т.п.). Существует несколько разновидностей окон и соответственно объектов 
  окон — с рамкой, без рамки, со строкой заголовка, без заголовка и т.д.<br>
  </font></p>
<p align="left"> <font face="Arial, Helvetica, sans-serif" size="3">Класс окно 
  с рамкой .является подклассом (или производным классом) класса окно. Точно так 
  же подклассом класса окно является и класс окно с заголовком. В иерархической 
  системе классы окно с рамкой и окно с заголовком представляют собой отдельные 
  узлы одного и того же уровня иерархии. Они наследуют определенные методы, например 
  refresh (освежить), от базового класса окно, но имеют и собственные методы выполнения 
  таких операций, как перерисовка рамки или строки заголовка.<br>
  </font></p>
<p align="left"> <font face="Arial, Helvetica, sans-serif" size="3">А теперь предположим, 
  что нам потребовался еще один вид окна — окно с рамкой и строкой заголовка. 
  Окно такого типа должно быть представлено новым классом окно с рамкой и заголовком. 
  В иерархической системе новый класс будет наследником класса окно и независимым 
  &quot;близким родственником&quot; уже существующих классов окно с рамкой и окно 
  с заголовком на том же уровне иерархии (рис. 7.2). Но даже интуитивно чувствуется, 
  что такая организация избыточна. Ведь фактически <b>мы </b>стремимся &quot;смешать&quot; 
  два набора уже существующих качеств и получить в результате новый комбинированный 
  набор. Кажется, что целесообразнее сделать новый класс &quot;дитятей&quot; двух 
  родителей, — классов окно с рамкой и окно с заголовком (рис. 7.3).<br>
  </font></p>
<p align="center"><font face="Arial, Helvetica, sans-serif"><img src="2.gif" width="550" height="202"> 
  </font></p>
<p align="center"><font face="Arial, Helvetica, sans-serif" size="3">Рис. 7.2. 
  Иерархическая система классов окон<br>
  </font></p>
<p align="left"> <font face="Arial, Helvetica, sans-serif" size="3">Но здесь возникают 
  вопросы: а как новый класс будет наследовать процедуры, определенные в двух 
  базовых классах? Устроит ли нас &quot;смешанное&quot; поведение нового класса? 
  Эту проблему можно разложить на две составляющие:<br>
  </font></p>
<ul>
  <li> <font face="Arial, Helvetica, sans-serif" size="3"> найти подходящие методы 
    в базовых классах;<br>
    </font></li>
  <li> <font face="Arial, Helvetica, sans-serif" size="3"> скомбинировать их таким 
    образом, чтобы получить желаемый эффект.<br>
    </font></li>
</ul>
<p align="center"><font face="Arial, Helvetica, sans-serif"><img src="3.gif" width="550" height="309"> 
  </font></p>
<p align="center"><font face="Arial, Helvetica, sans-serif" size="3">Рис. 7.3. 
  Гетерархическая система классов окон<br>
  </font></p>
<p align="left"> <font face="Arial, Helvetica, sans-serif" size="3">Для решения 
  этой задачи очень подходит механизм включения в основной метод вставок, которые 
  должны выполняться <i>до </i>или <i>после </i>него. В приведенном выше примере 
  с объектами окон можно скомпоновать метод отрисовки окна с рамкой и строкой 
  заголовка таким образом, чтобы новый класс использовал унаследованный от класса 
  окно метод refresh и, кроме того, специализированные методы, унаследованные 
  от каждого из ближайших родителей и выполняемые <i>после </i>основного refresh. 
  При этом должен четко соблюдаться порядок выполнения унаследованных операций 
  и вставок, поскольку его изменение может привести к нежелательному эффекту. 
  В нашем примере после выполнения метода &quot;прародителя&quot; окно нужно выполнить 
  сначала вставку, унаследованную от класса окно с рамкой, а потом вставку, унаследованную 
  от класса окно с заголовком. В противном случае при вычерчивании рамки будет 
  затерта строка заголовка.</font></p>
<p>&nbsp;</p><table BORDER=0   COLS=3 WIDTH="16%" >
  <tr> 
    <td><font face="Arial, Helvetica, sans-serif"><a href="Index4.htm"><img SRC="Back.gif"  BORDER=0 ></a></font></td>
    <td WIDTH="10%"><font face="Arial, Helvetica, sans-serif"><a href="../index.html"><img SRC="Menu.gif" BORDER=0 ></a></font></td>
    <td ALIGN=RIGHT><font face="Arial, Helvetica, sans-serif"><a href="Index6.htm"><img SRC="For.gif" BORDER=0 ></a></font></td>
  </tr>
</table>
</body>
</html>