<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
<head>
<title></title>
<meta http-equiv="Content-Type" content="text/html;charset=windows-1251">
</head>
<body TEXT="#000000" BGCOLOR="#E7E3E7" LINK="#004080" VLINK="#004080" olink="#008080" Background="">
<table BORDER=0   COLS=3 WIDTH="16%" >
  <tr> 
    <td><font face="Arial, Helvetica, sans-serif"><a href="Index6.htm"><img SRC="Back.gif"  BORDER=0 ></a></font></td>
    <td WIDTH="10%"><font face="Arial, Helvetica, sans-serif"><a href="../index.html"><img SRC="Menu.gif" BORDER=0 ></a></font></td>
    <td ALIGN=RIGHT><font face="Arial, Helvetica, sans-serif"><a href="Index8.htm"><img SRC="For.gif" BORDER=0 ></a></font></td>
  </tr>
</table>
<p>&nbsp;</p>
<p align="center"><font face="Arial, Helvetica, sans-serif" size="3"><font size="4">17.3.3. 
  Языки логического программирования экспертных систем</font><br>
  </font></p>
<p align="left"> <font face="Arial, Helvetica, sans-serif" size="3">Критически 
  оценивая первый опыт применения инструментальных средств типа оболочек при проектировании 
  экспертных систем, в частности опыт использования EMYCIN, многие исследователи 
  полагали, что более перспективным является альтернативный подход, основанный 
  на логическом программировании (см., например, <i>[Kowalski, 1982]). </i>Например, 
  предполагалось, что порождающие экспертные системы, аналогичные MYCIN, могут 
  быть довольно просто реализованы на языке PROLOG <i>[Clark and McCabe, 1982]. 
  </i>Правила можно представить в виде фраз Хорна (см. об этом в главе 8), в которых 
  головной (позитивный) литерал соответствует заключению, а прочие (негативные) 
  литералы будут соответствовать условиям.<br>
  </font></p>
<p align="left"> <font face="Arial, Helvetica, sans-serif" size="3">Встроенный 
  в PROLOG режим управления приблизительно соответствует стратегии обратного логического 
  вывода, которая используется в системах, подобных MYCIN. Таблицы знаний и другие 
  данные можно представить с помощью утверждений. Рекурсивные структуры данных 
  — графы и деревья — можно организовать с помощью фраз языка PROLOG, которые 
  содержат комплексные термы. Языковые средства PROLOG позволят программисту разработать 
  собственный механизм обработки неопределенности, причем не исключается и использование 
  коэффициентов уверенности.<br>
  </font></p>
<p align="left"> <font face="Arial, Helvetica, sans-serif" size="3">С практической 
  точки зрения, пользуясь языком PROLOG, программист в качестве &quot;бесплатного 
  приложения&quot; получает в свое распоряжение следующие возможности:<br>
  </font></p>
<ul>
  <li> <font face="Arial, Helvetica, sans-serif" size="3"> <i>индексированную 
    базу данных </i>фраз, которые можно использовать для представления правил, 
    процедур или данных;<br>
    </font></li>
  <li> <font face="Arial, Helvetica, sans-serif" size="3"> <i>универсальный механизм 
    сопоставления, </i>который позволяет выполнять сопоставление данных и шаблонов, 
    включающих переменные, и возвращать подстановку, которая может обеспечить 
    их совпадение;<br>
    </font></li>
  <li> <font face="Arial, Helvetica, sans-serif" size="3"> <i>стратегию управления 
    </i>(поиск в глубину — depth-first search), основанную на правилах нисходящего 
    поиска (фразы, которые размещены в базе данных ближе к &quot;голове&quot;, 
    обрабатываются первыми) и вычислении слева направо (подцели обрабатываются 
    в том порядке, в котором они перечислены в списке).<br>
    </font></li>
</ul>
<p align="left"> <font face="Arial, Helvetica, sans-serif" size="3">Действительно, 
  дедуктивную порождающую систему довольно ПРОСТО эмулировать на языке PROLOG. 
  Можно без особого труда разработать и простой интерпретатор, реализующий стратегию 
  построения прямой цепочки вывода. Модификация рабочей памяти выполняется операторами 
  assert и retract, которые добавляют или удаляют формулы из базы данных. Вы уже 
  знаете из главы 11, как можно организовать локальное управление ходом процесса 
  в системе, основанной на фреймах, как организовать обработку значений по умолчанию 
  и исключений, хотя эти методы и не вписываются в стандартную логику.<br>
  </font></p>
<p align="left"> <font face="Arial, Helvetica, sans-serif" size="3">Успешный опыт 
  применения идей логического программирования, в частности создание программы 
  МЕСНО (см. главу 11), продемонстрировал ряд явных отклонений от синтаксиса исчисления 
  предикатов первого порядка и его процедурной интерпретации в стандартной версии 
  PROLOG. Некоторые семантические и синтаксические ограничения в программах МЕСНО 
  и PLANNER до сих пор не преодолены в системах, базирующихся на языках логического 
  программирования.</font></p>
<p>&nbsp;</p><table BORDER=0   COLS=3 WIDTH="16%" >
  <tr> 
    <td><font face="Arial, Helvetica, sans-serif"><a href="Index6.htm"><img SRC="Back.gif"  BORDER=0 ></a></font></td>
    <td WIDTH="10%"><font face="Arial, Helvetica, sans-serif"><a href="../index.html"><img SRC="Menu.gif" BORDER=0 ></a></font></td>
    <td ALIGN=RIGHT><font face="Arial, Helvetica, sans-serif"><a href="Index8.htm"><img SRC="For.gif" BORDER=0 ></a></font></td>
  </tr>
</table>
</body>
</html>