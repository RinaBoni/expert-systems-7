<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
<head>
<title></title>
<meta http-equiv="Content-Type" content="text/html;charset=windows-1251">
</head>
<body TEXT="#000000" BGCOLOR="#E7E3E7" LINK="#004080" VLINK="#004080" olink="#008080" Background="">
<table BORDER=0   COLS=3 WIDTH="16%" >
  <tr> 
    <td><font face="Arial, Helvetica, sans-serif"><a href="Index4.htm"><img SRC="Back.gif"  BORDER=0 ></a></font></td>
    <td WIDTH="10%"><font face="Arial, Helvetica, sans-serif"><a href="../index.html"><img SRC="Menu.gif" BORDER=0 ></a></font></td>
    <td ALIGN=RIGHT><font face="Arial, Helvetica, sans-serif"><a href="Index6.htm"><img SRC="For.gif" BORDER=0 ></a></font></td>
  </tr>
</table>
<p>&nbsp;</p>
<p align="center"><font face="Arial, Helvetica, sans-serif" size="3"><font size="4">17.3.1. 
  Языки описания порождающих правил</font><br>
  </font></p>
<p align="left"> <font face="Arial, Helvetica, sans-serif" size="3">Но, естественно, 
  возможности языков высокого уровня также не беспредельны — каждый из них имеет 
  свои ограничения. Например, в языке OPS5 возможности динамической памяти ограничены 
  размещением векторов в рабочей памяти, что не позволяет строить в ней рекурсивные 
  структуры данных, такие как графы или деревья. При разработке системы MORE (о 
  ней речь шла в главе 12) из-за этого возникли серьезные сложности <i>[Kahn, 
  1988]. </i>Некоторые типы структур управления ходом выполнения, например рекурсивные 
  и итерационные циклы, также с трудом реализуются в этом языке. В общем, это 
  та цена, которую приходится платить за относительную простоту программного кода 
  на языке OPS5 и эффективность его выполнения.<br>
  </font></p>
<p align="left"> <font face="Arial, Helvetica, sans-serif" size="3">В ранних моделях 
  систем, основанных на порождающих правилах, до 90% времени работы уходило на 
  выполнение операций сопоставления условий. Но позднее Форджи обратил внимание 
  на возможные источники низкой эффективности такого упрощенного подхода <i>[Forgy, 
  1982]. Алгоритм сопоставления RETE, </i>предложенный Форджи и реализованный 
  в языках описания порождающих правил семейства OPS, базируется на двух наблюдениях.<br>
  </font></p>
<ul>
  <li> <font face="Arial, Helvetica, sans-serif" size="3"> В левых частях порождающих 
    правил, которые размещаются в рабочей памяти, часто встречаются повторяющиеся 
    условия. Если одно и то же условие встречалось в <i>N </i>правилах, то при 
    прежнем упрощенном подходе выполнялось <i>N </i>операций сопоставления. Это 
    пример <i>внутрицикловой итерации (within-cycle iteration).</i><br>
    </font></li>
  <li> <font face="Arial, Helvetica, sans-serif" size="3"> Простейший подход при 
    сопоставлении условий предполагает просмотр в каждом цикле <i>всех </i>элементов 
    рабочей памяти, хотя содержимое рабочей памяти от цикла к циклу изменяется 
    очень мало. Форджи назвал это <i>межцикловой итерацией (between-cycle iteration).</i><br>
    </font></li>
</ul>
<p align="left"> <font face="Arial, Helvetica, sans-serif" size="3">Предложенный 
  Форджи алгоритм значительно снижает количество внутрицикловых итераций за счет 
  использования сети сортировки, имеющей древовидную структуру. Выражения в левой 
  части порождающих правил компилируются и включаются в эту сеть, а алгоритм сопоставления 
  довольно просто определяет конфликтующее множество, просматривая состояние сети 
  в текущем цикле. Количество межцикловых итераций сокращается за счет обработки 
  множества лексем, которые являются индикаторами удовлетворения условий, размещенных 
  в рабочей памяти. Это множество лексем отображает изменения, происходящие в 
  рабочей памяти от цикла к циклу, и таким образом позволяет выявить те условия, 
  которые подлежат проверке. Поскольку никаких других процессов управления, кроме 
  цикла <i>распознавание-действие, </i>в системе не существует, то обработать 
  полученное в результате конфликтующее множество не представляет особого труда. 
  Механизм разрешения конфликтов выполняет это, не обращая внимания на другие 
  аспекты текущего контекста вычислений.<br>
  </font></p>
<p align="left"> <font face="Arial, Helvetica, sans-serif" size="3">Совершенно 
  очевидно, что попытка использовать рекурсивные структуры данных потребует серьезного 
  усложнения описанного процесса обработки правил. Точно так же и изменение режима 
  управления приведет к тому, что механизм разрешения конфликтов вынужден будет 
  анализировать дополнительную информацию. Разработчики языков, подобных OPS, 
  всегда вынуждены искать компромисс между мощностью выразительных средств языка 
  и эффективностью выполнения программного кода. До сих пор в среде исследователей 
  предметом оживленных дискуссий является вопрос о том, удалось ли разработчикам 
  OPS5 найти такой компромисс. Разработанные позже языки КЕЕ, КАРРА и CLIPS унаследовали 
  от OPS5 синтаксис и механизм активизации правил. Все эти языки используют различные 
  версии алгоритма RETE при формировании множества конфликтующих правил.<br>
  </font></p>
<p align="left"> <font face="Arial, Helvetica, sans-serif" size="3">Преодоление 
  недостатков программирования порождающих правил лежит не на пути усложнения 
  существующих языков программирования, а скорее на пути объединения их с другими 
  парадигмами программирования, позволяющими использовать рекурсивные структуры 
  данных и управления. Примером такого объединения может служить комбинирование 
  порождающих правил и фреймов, что позволяет сопоставлять условия, специфицированные 
  в правилах, с содержимым слотов фреймов (см. главу 13). Для решения проблем 
  управления в последнее время все чаще используется включение наборов правил 
  в более мощную.вычислительную среду, которая позволяет работать со списками 
  заявок и с множеством источников знаний (подробнее об этом — в главе 18).</font></p>
<p>&nbsp;</p><table BORDER=0   COLS=3 WIDTH="16%" >
  <tr> 
    <td><font face="Arial, Helvetica, sans-serif"><a href="Index4.htm"><img SRC="Back.gif"  BORDER=0 ></a></font></td>
    <td WIDTH="10%"><font face="Arial, Helvetica, sans-serif"><a href="../index.html"><img SRC="Menu.gif" BORDER=0 ></a></font></td>
    <td ALIGN=RIGHT><font face="Arial, Helvetica, sans-serif"><a href="Index6.htm"><img SRC="For.gif" BORDER=0 ></a></font></td>
  </tr>
</table>
</body>
</html>