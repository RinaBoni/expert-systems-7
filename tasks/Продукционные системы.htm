<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://inf.susu.ac.ru/~pollak/expert/eclipsed/ps.htm -->
<HTML><HEAD><TITLE>Продукционные системы</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1251">
<META content="MSHTML 5.50.4522.1800" name=GENERATOR></HEAD>
<BODY text=#000000 vLink=#ff0000 aLink=#ff0000 link=#0000ff 
bgColor=#ffffff>&nbsp; 
<CENTER>
<TABLE cellPadding=10 width="100%">
  <TBODY>
  <TR>
    <TD bgColor=#ffffff>
      <H1><FONT face="Arial Cyr,Helvetica Cyr"><FONT size=+1>Продукционные 
      Системы</FONT></FONT></H1><FONT face="Arial Cyr,Helvetica Cyr"><FONT 
      size=-1><B>Продукция - </B>это просто правило. Продукции были сначала 
      введены как формальный способ выражения языков в Информатике. Например, 
      каждое правило контекстно-свободного языка, записанное в спецификации 
      БЕКУСА-НАУРА названо <I>продукцией</I>. НОРМАЛЬНАЯ&nbsp; ФОРМА БЕКУСА - 
      НАУРА обычно используется для описания синтаксиса языков 
      программирования.</FONT></FONT> 
      <P><FONT face="Arial Cyr,Helvetica Cyr"><FONT size=-1><B><A target="" 
      href="http://inf.susu.ac.ru/~pollak/expert/eclipsed/InferenceEngines.htm">Продукционная 
      система </A></B>- это система, основанная на правилах типа НОРМАЛЬНОЙ 
      ФОРМЫ БЕКУСА-НАУРА, в которой <I>порядок правил не имеет значения.</I> 
      Продукционные системы представляют правила как совокупность независимых 
      операторов, в отличие от условнай логики, используемой в <B>логическом 
      программировании </B>или от процедурных языков 
      программирования.&nbsp;</FONT></FONT> <BR>&nbsp; 
      <BLOCKQUOTE>
        <LI><FONT face="Arial Cyr,Helvetica Cyr"><FONT size=-1>В любом языке, <A 
        target="" 
        href="http://inf.susu.ac.ru/~pollak/expert/eclipsed/Eclipse.htm">основанном 
        на правилах продукции,</A> порядок выполнения правила отличается от 
        функциональных возможностей <B>IF - THEN </B>условий или подобных 
        условных логических конструкций в продукционных языках третьего 
        поколения (3GL). Это относится прежде всего к языкам типа КОБОЛ и C. 
        Более того, любой язык, основанный на использовании продукций, который 
        инициирует проверку правил, требуя загрузку правил или их условий для 
        классов или атрибутов классов, не добавляет ничего такого, чего бы не 
        было в таких языках как C++ или Smalltalk. Проверка <B>IF - THEN 
        </B>условий для одного или более встроенных классов или их атрибутов, 
        является не более чем оператором обращения к функции от функции, 
        принадлежащей к определенному классу или типу данных. В 
        действительности, объектно-ориентированный подход есть одна из форм 
        представления блок-схем. </FONT></FONT>Продукционные системы устраняют 
        составление блок-схем: </LI></BLOCKQUOTE>
      <OL>
        <OL>
          <LI><FONT face="Arial Cyr,Helvetica Cyr"><FONT size=-1>Определяя набор 
          соответствующих правил</FONT></FONT> 
          <LI><FONT face="Arial Cyr,Helvetica Cyr"><FONT size=-1>Выбирая 
          правила, которое нужно применить</FONT></FONT> 
          <LI><FONT face="Arial Cyr,Helvetica Cyr"><FONT size=-1>Выполняя 
          действие (записанное в части <B>THEN</B>) выбранного 
          правила</FONT></FONT> </LI></OL></OL><FONT 
      face="Arial Cyr,Helvetica Cyr"><FONT size=-1>Тот факт, что продукционная 
      система сама отвечает за определение набора применимых правил, устраняет 
      утомительные и склонные к погрешности действия по созданию или поддержанию 
      блок-схемы , включающей большое число условных вершин (т.е. вершин с одним 
      входом, которые выполняют переход к любому из двух выходов). Кроме того, 
      продукционная система освобождает программиста от выявления , уже не 
      говоря о составлении блок-схем или кодирования, всех путей, на которых 
      правило может стать применимым или неприменимым&nbsp;</FONT></FONT> 
      <P><FONT face="Arial Cyr,Helvetica Cyr"><FONT size=-1>Хотя продукцуонная 
      система может быть представлена как Цепочка Маркова, в которой правила 
      проверяются в последовательном или произвольном порядке, эффективность 
      такого выполнения правил линейно зависит от количества правил. Кроме того, 
      такой порядок выполнения склоненк избыточным или четным циклам, в которых 
      правило уже выполнено выполнено, но снова может быть выбрано для 
      выполнения для оставшихся правил.</FONT></FONT> 
      <P><FONT face="Arial Cyr,Helvetica Cyr"><FONT size=-1>Единственным 
      алгоритмом, чья эффективность при применении в продукционных системах, не 
      зависит от количества правил является <A 
      href="http://inf.susu.ac.ru/~pollak/expert/eclipsed/ReteAlgorithm.htm">Rete 
      алгоритм</A>.</FONT></FONT></P></TD></TR></TBODY></TABLE></CENTER>
<HR width="100%">
<BR><FONT face="Arial Cyr,Helvetica Cyr"><FONT size=-1><A 
href="http://inf.susu.ac.ru/~pollak/expert/eclipsed/Eclipse.htm">Возврат к 
Eclipse</A></FONT></FONT> <BR><FONT face="Arial Cyr,Helvetica Cyr"><FONT 
size=-1><A 
href="http://inf.susu.ac.ru/~pollak/expert/eclipsed/ActivaAg.html">Возврат к 
ActiveAgentX</A></FONT></FONT> </BODY></HTML>
